version: '3.8'

services:
  # Database
  postgres:
    image: 'postgres:16-alpine'
    container_name: vcut-postgres
    environment:
      POSTGRES_DB: vcut_db
      POSTGRES_USER: vcut_user
      POSTGRES_PASSWORD: vcut_password
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vcut_user -d vcut_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - vcut-network

  # Redis Cache
  redis:
    image: 'redis:7-alpine'
    container_name: vcut-redis
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - vcut-network

  # Kafka and Zookeeper
  zookeeper:
    image: 'confluentinc/cp-zookeeper:7.5.0'
    container_name: vcut-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - vcut-network

  kafka:
    image: 'confluentinc/cp-kafka:7.5.0'
    container_name: vcut-kafka
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - vcut-network

  # MinIO Object Storage
  minio:
    image: 'minio/minio:latest'
    container_name: vcut-minio
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - vcut-network

  # Kafka UI (Optional)
  kafka-ui:
    image: 'provectuslabs/kafka-ui:latest'
    container_name: vcut-kafka-ui
    depends_on:
      - kafka
    ports:
      - '8090:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - vcut-network

  # Ollama AI Service
  ollama:
    image: 'ollama/ollama:latest'
    container_name: vcut-ollama
    ports:
      - '11434:11434'
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - vcut-network

  # Elasticsearch (for search functionality)
  elasticsearch:
    image: 'docker.elastic.co/elasticsearch/elasticsearch:8.11.0'
    container_name: vcut-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - '9200:9200'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - vcut-network

  # Prometheus (Monitoring)
  prometheus:
    image: 'prom/prometheus:v2.48.0'
    container_name: vcut-prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - vcut-network

  # Grafana (Monitoring Dashboard)
  grafana:
    image: 'grafana/grafana:10.2.0'
    container_name: vcut-grafana
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - vcut-network

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  minio_data:
  ollama_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  vcut-network:
    driver: bridge