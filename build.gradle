plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.google.protobuf' version '0.9.4'
}

group = 'ru.planetmc'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springAiVersion', "1.0.0")
    set('springCloudVersion', "2025.0.0")
    set('springGrpcVersion', "0.8.0")
    set('springModulithVersion', "1.4.0")
    set('ffmpegVersion', "0.6.2")
}

dependencies {
    // Core Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-integration'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    // Database
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.springframework:spring-jdbc'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'org.postgresql:r2dbc-postgresql'

    // gRPC
    implementation 'io.grpc:grpc-services'
    implementation 'org.springframework.grpc:spring-grpc-spring-boot-starter'
    testImplementation 'org.springframework.grpc:spring-grpc-test'

    // Kafka
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'
    implementation 'org.springframework.integration:spring-integration-kafka'
    implementation 'org.apache.kafka:kafka-streams'
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    // Spring Cloud
    implementation 'org.springframework.cloud:spring-cloud-bus'
    implementation 'org.springframework.cloud:spring-cloud-config-server'
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-consul-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-consul-discovery'
    implementation 'org.springframework.cloud:spring-cloud-starter-gateway-server-webflux'
    implementation 'org.springframework.cloud:spring-cloud-starter-vault-config'

    // Spring Integration
    implementation 'org.springframework.integration:spring-integration-r2dbc'
    implementation 'org.springframework.integration:spring-integration-webflux'
    testImplementation 'org.springframework.integration:spring-integration-test'

    // Spring Modulith
    implementation 'org.springframework.modulith:spring-modulith-events-api'
    implementation 'org.springframework.modulith:spring-modulith-starter-core'
    runtimeOnly 'org.springframework.modulith:spring-modulith-actuator'
    runtimeOnly 'org.springframework.modulith:spring-modulith-events-kafka'
    runtimeOnly 'org.springframework.modulith:spring-modulith-observability'
    testImplementation 'org.springframework.modulith:spring-modulith-starter-test'

    // Spring AI
    implementation 'org.springframework.ai:spring-ai-markdown-document-reader'
    implementation 'org.springframework.ai:spring-ai-starter-model-ollama'
    implementation 'org.springframework.ai:spring-ai-starter-model-postgresml-embedding'
    implementation 'org.springframework.ai:spring-ai-tika-document-reader'
    developmentOnly 'org.springframework.ai:spring-ai-spring-boot-docker-compose'

    // Security
    implementation 'org.springframework.security:spring-security-messaging'
    testImplementation 'org.springframework.security:spring-security-test'

    // Observability
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    // Object Storage (MinIO/S3)
    implementation 'io.minio:minio:8.5.7'
    implementation 'software.amazon.awssdk:s3:2.21.29'

    // Redis Cache
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'

    // Video Processing
    implementation 'net.bramp.ffmpeg:ffmpeg:0.6.2'
    implementation 'org.bytedeco:javacv-platform:1.5.8'

    // Utilities
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // JSON Processing
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:kafka'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.modulith:spring-modulith-bom:${springModulithVersion}"
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
        mavenBom "org.springframework.grpc:spring-grpc-dependencies:${springGrpcVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:1.19.3"
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                option 'jakarta_omit'
                option '@generated=omit'
            }
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
